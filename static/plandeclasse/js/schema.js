// static/plandeclasse/js/schema.js
"use strict";

/**
 * Module Schema : (re)construction du plan (rang√©es/tables/capacit√©s) et
 * nettoyage des placements/interdits/coh√©rence avec contraintes.
 *
 * S√©curit√© (CSP) :
 *  - Pas de style inline et pas d‚ÄôHTML inject√© via innerHTML pour les √©l√©ments dynamiques.
 */

import {state as etat} from "./state.js";
import {
    renderRoom as rendreSalle,
    renderStudents as rendreEleves,
    updateBanButtonLabel as majBoutonBan
} from "./render.js";
import {renderConstraints as rendreContraintes} from "./constraints.js";

/* ==========================================================================
   Recalage apr√®s changement de sch√©ma
   ========================================================================== */

/**
 * Recalage des placements/interdits/contraintes apr√®s un changement de sch√©ma
 * (sans reconstruire etat.schema). Les capacit√©s n√©gatives sont des "trous".
 *
 * Effets :
 * - purge les affectations devenues invalides (hors bornes / sur table-trou / hors capacit√©),
 * - reconstruit proprement la liste des si√®ges interdits + contraintes forbid_seat,
 * - rafra√Æchit l‚ÄôUI (salle/√©l√®ves/contraintes/boutons + mini-√©diteur de rang√©es).
 */
export function reconcileAfterSchemaChange() {
    const nouveauxPlacements = new Map();
    const nouvelIndexInverse = new Map();

    // Recalage des affectations existantes
    for (const [cleSiege, sid] of etat.placements.entries()) {
        const [x, y, s] = cleSiege.split(",").map(Number);
        if (y < etat.schema.length && x < etat.schema[y].length) {
            const capacite = etat.schema[y][x];
            if (capacite > 0 && s < capacite) {
                nouveauxPlacements.set(cleSiege, sid);
                nouvelIndexInverse.set(sid, cleSiege);
            }
        }
    }
    etat.placements = nouveauxPlacements;
    etat.placedByStudent = nouvelIndexInverse;

    // Recalage des si√®ges interdits (+ contraintes forbid_seat)
    const nouveauxInterdits = new Set();
    const contraintesInterdits = [];
    for (const cleSiege of etat.forbidden) {
        const [x, y, s] = cleSiege.split(",").map(Number);
        if (y < etat.schema.length && x < etat.schema[y].length) {
            const capacite = etat.schema[y][x];
            if (capacite > 0 && s < capacite) {
                nouveauxInterdits.add(cleSiege);
                contraintesInterdits.push({
                    type: "forbid_seat",
                    x, y, s,
                    human: `si√®ge (x=${x}, y=${y}, s=${s}) doit rester vide`,
                    key: cleSiege,
                });
            }
        }
    }
    etat.forbidden = nouveauxInterdits;

    // Remplace toutes les forbid_seat par la version recalcul√©e
    etat.constraints = etat.constraints
        .filter((c) => c.type !== "forbid_seat")
        .concat(contraintesInterdits);

    // Rafra√Æchit l‚ÄôIHM
    rendreSalle();
    rendreEleves();
    rendreContraintes();
    majBoutonBan();
    renderRowsEditor();
}

/* ==========================================================================
   Application d‚Äôun sch√©ma "rectangulaire"
   ========================================================================== */

/**
 * Construit un sch√©ma √† partir d‚Äôun nombre de rang√©es et d‚Äôune cha√Æne de capacit√©s.
 * Exemple : rows=3, capacitiesStr="2,3,2" ‚Üí [[2,3,2],[2,3,2],[2,3,2]]
 *
 * @param {number} rows - nombre de rang√©es
 * @param {string} capacitiesStr - liste des capacit√©s s√©par√©es par virgules/espaces ; n√©gatif = "trou"
 */
export function applySchema(rows /**: number */, capacitiesStr /**: string */) {
    const capacites = capacitiesStr
        .split(/[,\s]+/)
        .map((s) => Number(s.trim()))
        .filter((n) => Number.isFinite(n) && n !== 0);

    // Reconstruit toutes les rang√©es √† l‚Äôidentique
    const nouveauSchema = Array.from({length: rows}, () => capacites.slice());
    etat.schema = nouveauSchema;

    // Recale le reste sans retoucher au sch√©ma
    reconcileAfterSchemaChange();
}

/* ==========================================================================
   R√©initialisation compl√®te de la salle (sch√©ma)
   ========================================================================== */

/**
 * R√©initialise la **salle** (sch√©ma) et recale l‚Äô√©tat d√©pendant.
 *
 * Effets :
 * - Vide le sch√©ma (etat.schema = [])
 * - Recalage via reconcileAfterSchemaChange() : nettoie placements et
 *   reconstruit proprement l‚Äô√©tat ‚Äúsi√®ges interdits/contraintes de si√®ge‚Äù
 * - Efface la s√©lection courante
 * - Re-rend l‚ÄôUI (salle/√©l√®ves/contraintes) + met √† jour les boutons
 *
 * Conserve :
 * - Les contraintes non structurelles (unaires/binaires) restent telles quelles
 *   (inutiles avec une salle vide, mais on n‚Äôefface pas la ‚Äúliste de souhaits‚Äù)
 */
export function resetRoomSchema() {
    // Vide le sch√©ma
    etat.schema = [];

    // La s√©lection n‚Äôa plus de sens
    etat.selection.studentId = null;
    etat.selection.seatKey = null;

    // Recalage g√©n√©ral (purge placements + reclasse les ‚Äúforbid_seat‚Äù au propre)
    reconcileAfterSchemaChange();

    // (reconcileAfterSchemaChange fait d√©j√† les render + updateBanButtonLabel + editor)
}

/* ==========================================================================
   Mini-√©diteur des rang√©es (liste + suppression)
   ========================================================================== */

/**
 * Rendu du petit √©diteur de rang√©es (aper√ßu + bouton supprimer).
 * Utilise uniquement des n≈ìuds DOM et textContent (pas d‚ÄôinnerHTML) pour CSP/XSS.
 */
export function renderRowsEditor() {
    const racine = document.getElementById("rowsEditor");
    if (!racine) return;
    racine.textContent = "";

    const lignes = etat.schema;
    if (!Array.isArray(lignes) || lignes.length === 0) {
        const vide = document.createElement("div");
        vide.className = "text-muted small";
        vide.textContent = "aucune rang√©e pour le moment.";
        racine.appendChild(vide);
        return;
    }

    lignes.forEach((capacites, y) => {
        const item = document.createElement("div");
        item.className = "d-flex align-items-center justify-content-between border rounded px-2 py-1";

        // Bloc libell√© : <strong>rang√©e N</strong> (<span class="text-muted">(‚Ä¶)</span>)
        const blocLibelle = document.createElement("div");

        const fort = document.createElement("strong");
        fort.textContent = `rang√©e ${y + 1}`;

        const spanDetails = document.createElement("span");
        spanDetails.className = "text-muted";
        const joli = capacites.map((c) => (c > 0 ? String(c) : `trou(${Math.abs(c)})`)).join(" ¬∑ ");
        spanDetails.textContent = ` (${joli})`;

        blocLibelle.appendChild(fort);
        blocLibelle.appendChild(document.createTextNode(" "));
        blocLibelle.appendChild(spanDetails);

        // Bouton supprimer
        const btnSuppr = document.createElement("button");
        btnSuppr.className = "btn btn-sm btn-outline-danger";
        btnSuppr.setAttribute("aria-label", `Supprimer la rang√©e ${y + 1}`);
        btnSuppr.textContent = "üóë";
        btnSuppr.addEventListener("click", () => {
            if (!confirm(`Supprimer la rang√©e ${y + 1} ?`)) return;
            deleteRowAt(y);
        });

        item.appendChild(blocLibelle);
        item.appendChild(btnSuppr);
        racine.appendChild(item);
    });
}

/**
 * Supprime la rang√©e d‚Äôindex y et recale l‚Äô√©tat.
 * @param {number} y - index de rang√©e (0-based)
 */
export function deleteRowAt(y) {
    if (y < 0 || y >= etat.schema.length) return;
    // Retire la rang√©e
    etat.schema.splice(y, 1);
    // Recalage des placements/interdits/forbid_seat existants (+ rerenders & editor)
    reconcileAfterSchemaChange();
}
