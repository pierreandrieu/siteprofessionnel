# Fichier docker-compose.yml
# Remarque: le champ "version" est obsolète avec Compose v2, on le supprime.

services:
  # 1) Service utilitaire "init-fs" :
  #    - Crée les dossiers host s'ils n'existent pas
  #    - Applique owner/permissions sur /var/www/... côté hôte
  #    - S'exécute une fois avant "web"
  init-fs:
    image: busybox:1.36
    environment:
      # Ces deux variables sont lues depuis .env (ou --env-file)
      UID: "${UID:-1000}"   # UID de l’utilisateur hôte qui publie les PDFs
      GID: "${GID:-1000}"   # GID correspondant
    command: >
      sh -euxc '
        echo "[init-fs] target owner=${UID}:${GID}";
        install -d -o ${UID} -g ${GID} /host/static /host/media;
        chown -R ${UID}:${GID} /host/static /host/media;
        chmod -R u+rwX,go+rX /host/static /host/media;
        echo "[init-fs] done";
        ls -ldn /host/static /host/media || true
      '
    volumes:
      # Montages en lecture/écriture côté "init-fs" (il doit pouvoir chown/chmod)
      - type: bind
        source: /var/www/pierreandrieu/static
        target: /host/static
        read_only: false
      - type: bind
        source: /var/www/pierreandrieu/media
        target: /host/media
        read_only: false
    restart: "no"

  # 2) Base de données
  db:
    image: postgres:16
    env_file: .env.prod                  # variables d'env pour le conteneur "db"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    security_opt: [ "no-new-privileges:true" ]

  # 3) Application Django
  web:
    build: .
    env_file: .env.prod                  # variables d'env pour le conteneur "web"
    environment:
      ENVIRONMENT: production
      DJANGO_SETTINGS_MODULE: sitepro.settings.prod
      MEDIA_ROOT: /app/media
    depends_on:
      init-fs:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    volumes:
      # En PROD: montages **en lecture seule** côté "web"
      - type: bind
        source: /var/www/pierreandrieu/static
        target: /app/staticfiles
        read_only: true
      - type: bind
        source: /var/www/pierreandrieu/media
        target: /app/media
        read_only: true
    ports:
      - "127.0.0.1:8000:8000"
    restart: unless-stopped
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    healthcheck:
      # Test simple: ouverture d’un socket TCP sur 127.0.0.1:8000 depuis le conteneur
      test: [ "CMD-SHELL", "python -c \"import socket,sys; s=socket.socket(); s.settimeout(2); s.connect(('127.0.0.1',8000)); s.close()\"" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    read_only: true                      # Système de fichiers du conteneur en RO
    tmpfs: [ "/tmp" ]                    # Espace temporaire écrivable
    security_opt: [ "no-new-privileges:true" ]
    cap_drop: [ "ALL" ]
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: 2g

volumes:
  postgres_data:
