# Fichier docker-compose.yml
# Remarque: le champ "version" est obsolète avec Compose v2, on le supprime.

services:
  init-fs:
    image: busybox:1.36
    environment:
      # proprio du static : l'utilisateur du conteneur web (10001)
      STATIC_UID: "10001"
      STATIC_GID: "10001"
      # proprio du media : ton utilisateur hôte (vient de .env.prod)
      MEDIA_UID: "${UID:-1001}"
      MEDIA_GID: "${GID:-1001}"
    command: >
      sh -euxc '
        echo "[init-fs] static -> $STATIC_UID:$STATIC_GID ; media -> $MEDIA_UID:$MEDIA_GID";
        install -d -o "$STATIC_UID" -g "$STATIC_GID" /host/static;
        install -d -o "$MEDIA_UID"  -g "$MEDIA_GID"  /host/media;
        chown -R "$STATIC_UID:$STATIC_GID" /host/static;
        chown -R "$MEDIA_UID:$MEDIA_GID"  /host/media;
        chmod -R u+rwX,go+rX /host/static /host/media;
        ls -ldn /host/static /host/media || true
      '
    volumes:
      - type: bind
        source: /var/www/pierreandrieu/static
        target: /host/static
        read_only: false
      - type: bind
        source: /var/www/pierreandrieu/media
        target: /host/media
        read_only: false
    restart: "no"


  # 2) Base de données
  db:
    image: postgres:16
    env_file: .env.prod                  # variables d'env pour le conteneur "db"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    security_opt: [ "no-new-privileges:true" ]

  # 3) Application Django
  web:
    build: .
    env_file: .env.prod                  # variables d'env pour le conteneur "web"
    environment:
      ENVIRONMENT: production
      DJANGO_SETTINGS_MODULE: sitepro.settings.prod
      MEDIA_ROOT: /app/media
    depends_on:
      init-fs:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    volumes:
      # En PROD: montages **en lecture seule** côté "web"
      - type: bind
        source: /var/www/pierreandrieu/static
        target: /app/staticfiles
        read_only: false
      - type: bind
        source: /var/www/pierreandrieu/media
        target: /app/media
        read_only: false
    ports:
      - "127.0.0.1:8000:8000"
    restart: unless-stopped
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    healthcheck:
      # Test simple: ouverture d’un socket TCP sur 127.0.0.1:8000 depuis le conteneur
      test: [ "CMD-SHELL", "python -c \"import socket,sys; s=socket.socket(); s.settimeout(2); s.connect(('127.0.0.1',8000)); s.close()\"" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    read_only: true                      # Système de fichiers du conteneur en RO
    tmpfs: [ "/tmp" ]                    # Espace temporaire écrivable
    security_opt: [ "no-new-privileges:true" ]
    cap_drop: [ "ALL" ]
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: 4g

  redis:
    image: redis:7-alpine
    # comments in English
    command: [ "redis-server","--save","", "--appendonly","no", "--maxmemory","256mb", "--maxmemory-policy","allkeys-lru" ]
    # No volumes: all in RAM; or use a tmpfs if you veux for /data:
    tmpfs:
      - /data
    restart: unless-stopped
    security_opt: [ "no-new-privileges:true" ]

volumes:
  postgres_data:
