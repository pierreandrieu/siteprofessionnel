# docker-compose.prod.yml

services:
  init-fs:
    image: busybox:1.36
    environment:
      STATIC_UID: "${STATIC_UID:-10001}"
      STATIC_GID: "${STATIC_GID:-10001}"
      MEDIA_UID: "${MEDIA_UID:-1001}"
      MEDIA_GID: "${MEDIA_GID:-1001}"
    command: >
      sh -euxc '
        echo "[init-fs] static -> $STATIC_UID:$STATIC_GID ; media -> $MEDIA_UID:$MEDIA_GID";
        install -d -o "$STATIC_UID" -g "$STATIC_GID" /host/static;
        install -d -o "$MEDIA_UID"  -g "$MEDIA_GID"  /host/media;
        chown -R "$STATIC_UID:$STATIC_GID" /host/static;
        chown -R "$MEDIA_UID:$MEDIA_GID"  /host/media;
        chmod -R u+rwX,go+rX /host/static /host/media;
        ls -ldn /host/static /host/media || true
      '
    volumes:
      - type: bind
        source: /var/www/pierreandrieu/static
        target: /host/static
      - type: bind
        source: /var/www/pierreandrieu/media
        target: /host/media
    restart: "no"

  db:
    image: postgres:16
    env_file: .env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    security_opt: [ "no-new-privileges:true" ]

  web:
    cpus: "1.5"
    mem_limit: "1g"
    build: .
    env_file: .env.prod
    environment:
      ENVIRONMENT: production
      DJANGO_SETTINGS_MODULE: sitepro.settings.prod
      MEDIA_ROOT: /app/media
    depends_on:
      init-fs:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - type: bind
        source: /var/www/pierreandrieu/static
        target: /app/staticfiles
        read_only: false
      - type: bind
        source: /var/www/pierreandrieu/media
        target: /app/media
        read_only: false
    ports:
      - "127.0.0.1:8000:8000"
    restart: unless-stopped
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    healthcheck:
      test: [ "CMD-SHELL", "python -c \"import socket;s=socket.socket();s.settimeout(2);s.connect(('127.0.0.1',8000));s.close()\"" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    read_only: true
    tmpfs: [ "/tmp" ]
    security_opt: [ "no-new-privileges:true" ]
    cap_drop: [ "ALL" ]

  redis:
    image: redis:7-alpine
    command: [ "redis-server","--save","","--appendonly","no","--maxmemory","2gb","--maxmemory-policy","noeviction" ]
    tmpfs:
      - /data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped
    security_opt: [ "no-new-privileges:true" ]

  worker:
    cpus: "4.0"
    mem_limit: "4g"
    build: .
    env_file: .env.prod
    environment:
      ENVIRONMENT: production
      DJANGO_SETTINGS_MODULE: sitepro.settings.prod
      CELERY_CONCURRENCY: "4"
      CELERY_MAX_TASKS_PER_CHILD: "100"
      RUN_MIGRATIONS: "0"
      RUN_COLLECTSTATIC: "0"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      celery -A sitepro worker
      --loglevel=${CELERY_LOGLEVEL:-INFO}
      --concurrency=${CELERY_CONCURRENCY:-4}
      --max-tasks-per-child=${CELERY_MAX_TASKS_PER_CHILD:-100}
      -Q celery,default
    read_only: true
    tmpfs: [ "/tmp" ]
    restart: unless-stopped
    stop_grace_period: 60s
    security_opt: [ "no-new-privileges:true" ]
    cap_drop: [ "ALL" ]
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }

volumes:
  postgres_data:
